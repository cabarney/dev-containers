@page "/"
@using TodoWeb.Data
@inject TodoService TodoService

<PageTitle>To-Dos</PageTitle>

<h1>To-Dos</h1>

<div class="row">
  <div class="col">
    @if (todos == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Due Date</th>
                    @* <th>Completed</th> *@
                </tr>
            </thead>
            <tbody>
                @foreach (var todo in todos)
                {
                    <tr class="@((todo.Id == currentTodo.Id ? "table-primary" : ""))" @onclick="@(() => EditTodo(todo))">
                        <td>
                            <span class='oi @((todo.Completed ? "oi-check" : "none"))' style="color: green"></span>
                            @todo.Title
                            @* <button class="btn btn-link p-0 m-0" @onclick="@(() => EditTodo(todo))"></button> *@
                        </td>
                        <td>@(todo.DueDate?.ToShortDateString() ?? "")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
  </div>
  <div class="col">
    <h2>@(currentTodo.Id == 0 ? "Add" : "Edit") To-Do</h2>
    <EditForm Model="@currentTodo" OnSubmit="@HandleSubmit">
      <div class="row mb-3">
        <label for="title" class="col-sm-2 col-form-label">Title</label>
        <div class="col-sm-10">
          <InputText id="title" @bind-Value="currentTodo.Title" class="form-control" />
        </div>
      </div>
      <div class="row mb-3">
        <label for="dueDate" class="col-sm-2 col-form-label">Due Date</label>
        <div class="col-sm-10">
          <InputDate @bind-Value="currentTodo.DueDate" class="form-control" id="dueDate" />
        </div>
      </div>
      <div class="row mb-3">
        <div class="col-sm-10 offset-sm-2">
          <div class="form-check">
            <InputCheckbox @bind-Value="currentTodo.Completed" class="form-check-input" id="completed" />
            <label class="form-check-label" for="completed">Completed</label>
          </div>
        </div>
      </div>
      <button type="submit" class="btn btn-primary">Submit</button>
      
      <button type="button" @onclick="@(()=>{currentTodo = new();})" class="btn btn-outline-secondary" style="display:@((currentTodo.Id == 0 ? "none" : "inline-block"))">Cancel</button>
      <button type="button" @onclick="@(()=>{DeleteTodo();})" class="btn btn-outline-danger" style="display:@((currentTodo.Id == 0 ? "none" : "inline-block"))">Delete</button>
      
    </EditForm>
  </div>
</div>


          


@code {
    Todo currentTodo = new();

    private List<Todo>? todos;

    protected override async Task OnInitializedAsync() => await RefreshTodos();

    private async Task RefreshTodos()
    {
        todos = await TodoService.GetTodosAsync();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (currentTodo.Id == 0)
        {
            await TodoService.CreateTodoAsync(currentTodo);
        }
        else
        {
            await TodoService.UpdateTodoAsync(currentTodo);
        }
        currentTodo = new();
        await RefreshTodos();
    }

    private void EditTodo(Todo todo)
    {
        currentTodo = new() { Id = todo.Id, Title = todo.Title, DueDate = todo.DueDate, Completed = todo.Completed };
    }

    private async Task DeleteTodo()
    {
        await TodoService.DeleteTodoAsync(currentTodo.Id);
        currentTodo = new();
        await RefreshTodos();
    }
}
